import xml.etree.ElementTree as ET
import os 
import json 
import shutil

PLACEMENT_XML_PATH = "C:\\Users\\dadro\\Desktop\\LKPR FS2020\\PackageSources\\scene\\LKPR_Objects.xml"
tree = ET.parse(PLACEMENT_XML_PATH)
root = tree.getroot()

# Display all the codes inside the placements.xml
def print_codes(root):
    for child in root.findall("Airport"):
        for element in child.findall("TaxiwayParking"):
            try:
                print("Parking number: {} airlineCode: {}\n".format(element.attrib["displayName"],element.attrib["airlineCodes"]) )
            except KeyError as e: 
                continue


def get_total_parkings(root)->int:
    TOTAL_PARKINGS = 0
    for child in root.findall("Airport"):
        for element in child.findall("TaxiwayParking"):
            TOTAL_PARKINGS+=1
    return TOTAL_PARKINGS        


# Returns a dict containing the current list of Airline Codes
def current_codes()->dict:
    taxiparking = dict()
    for child in root.findall("Airport"):
        for element in child.findall("TaxiwayParking"):
            try:
                print(element.attrib['displayName'], element.attrib['airlineCodes'])
                taxiparking[str(element.attrib['displayName'])] = str(element.attrib['airlineCodes'])
            except KeyError:
                continue 
    return taxiparking 


# Inject all the codes from the airlinecodes.json to the Placement.xml
def inject_codes(airlinecodes_json:dict):
    for child in root.findall("Airport"):
        for element, key in zip(child.findall("TaxiwayParking"), airlinecodes_json):
            try:
                element.attrib["airlineCodes"] = airlinecodes_json[key]
                print("Changed Parking Code of {} to {}".format(element.attrib["displayName"], airlinecodes_json[key]) )
            except KeyError: 
                print("No Airline Code to change")
                continue    
    tree.write(PLACEMENT_XML_PATH)


# Write to file the dict generated by current_codes()
def save_to_json(taxiparking:dict):
    with open("airlinecodes.json", "w", encoding="utf8") as file:
        file.write(json.dumps(taxiparking, indent=4))


if __name__ == "__main__":


    # Loading the Placement.xml
    try:
        # Making the script folder writable
        os.chdir(os.path.dirname(__file__))
        cwd = os.getcwd()
        os.access(cwd, os.W_OK)

        # Making a backup of the Placement.xml File
        shutil.copy2(PLACEMENT_XML_PATH, os.path.join(cwd, 'backup.xml'))    

        # Uncomment if need to generate the Airlinecode.json file from scatch
        #taxiparking:dict = current_codes()
        #save_to_json(taxiparking)

        # Load airlinecodes.json file
        with open("airlinecodes.json", 'r', encoding="utf8") as f:
            airlinecodes_json = json.load(f)

        # Used to check the Airlinecodes.json 
        TOTAL_PARKINGS = get_total_parkings(root)

        # Injecting the codes to the Placement.xml
        inject_codes(airlinecodes_json)

    except ET.ParseError as e:
        print(e)



